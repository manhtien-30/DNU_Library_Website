@using Umbraco.Cms.Core.Models.Blocks
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IEnumerable<BlockGridItem>>
@{
    if (Model?.Any() != true) { return; }
    bool layout = false; // Declare the layout variable outside the loop
    var blockGroups = TempData["blocksWithGroupNames"] as Dictionary<string, string>;
}

@foreach (var item in Model)
{
    var groupName = blockGroups.GetValue(item.Content.ContentType.Key.ToString());
    @* if (item.Content.ContentType.Alias.StartsWith("layout")) *@
    if (groupName == "Layout Blocks")
    {
        layout = true; // Set the layout variable to true if the condition is met
        break; // Break out of the loop if the condition is met
    }
}


<!-- START - ITEMS -->
<div class="@(layout ? "layout-" : "feature-")items d-flex flex-column @(layout ? "gap-0" : "gap-3")">
@foreach (var item in Model)
{
    {
        var partialViewName = "blockgrid/Components/" + item.Content.ContentType.Alias;
        try
        {
            <!-- START - ITEM -->
            @await Html.PartialAsync(partialViewName, item)
            <!-- END - ITEM -->
        }
        catch (InvalidOperationException)
        {
            <p>
                <strong>Could not render component of type: @(item.Content.ContentType.Alias)</strong>
                <br />
                This likely happened because the partial view <em>@partialViewName</em> could not be found.
            </p>
        }
    }
}
</div>